// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/bblfsh/server/daemon/protocol/generated.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		github.com/bblfsh/server/daemon/protocol/generated.proto

	It has these top-level messages:
		DriverInstanceState
		DriverInstanceStatesResponse
		DriverPoolState
		DriverPoolStatesResponse
		DriverInstanceStatesRequest
		DriverPoolStatesRequest
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Status is the status of a driver instance.
var Status_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "PAUSING",
	3: "PAUSED",
	4: "STOPPED",
}
var Status_value = map[string]int32{
	"CREATED": 0,
	"RUNNING": 1,
	"PAUSING": 2,
	"PAUSED":  3,
	"STOPPED": 4,
}

func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *DriverInstanceState) Reset()                    { *m = DriverInstanceState{} }
func (m *DriverInstanceState) String() string            { return proto.CompactTextString(m) }
func (*DriverInstanceState) ProtoMessage()               {}
func (*DriverInstanceState) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *DriverInstanceStatesResponse) Reset()         { *m = DriverInstanceStatesResponse{} }
func (m *DriverInstanceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*DriverInstanceStatesResponse) ProtoMessage()    {}
func (*DriverInstanceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{1}
}

func (m *DriverPoolState) Reset()                    { *m = DriverPoolState{} }
func (m *DriverPoolState) String() string            { return proto.CompactTextString(m) }
func (*DriverPoolState) ProtoMessage()               {}
func (*DriverPoolState) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{2} }

func (m *DriverPoolStatesResponse) Reset()         { *m = DriverPoolStatesResponse{} }
func (m *DriverPoolStatesResponse) String() string { return proto.CompactTextString(m) }
func (*DriverPoolStatesResponse) ProtoMessage()    {}
func (*DriverPoolStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{3}
}

type DriverInstanceStatesRequest struct {
}

func (m *DriverInstanceStatesRequest) Reset()         { *m = DriverInstanceStatesRequest{} }
func (m *DriverInstanceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*DriverInstanceStatesRequest) ProtoMessage()    {}
func (*DriverInstanceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{4}
}

type DriverPoolStatesRequest struct {
}

func (m *DriverPoolStatesRequest) Reset()                    { *m = DriverPoolStatesRequest{} }
func (m *DriverPoolStatesRequest) String() string            { return proto.CompactTextString(m) }
func (*DriverPoolStatesRequest) ProtoMessage()               {}
func (*DriverPoolStatesRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func init() {
	proto.RegisterType((*DriverInstanceState)(nil), "github.com.bblfsh.server.daemon.protocol.DriverInstanceState")
	proto.RegisterType((*DriverInstanceStatesResponse)(nil), "github.com.bblfsh.server.daemon.protocol.DriverInstanceStatesResponse")
	proto.RegisterType((*DriverPoolState)(nil), "github.com.bblfsh.server.daemon.protocol.DriverPoolState")
	proto.RegisterType((*DriverPoolStatesResponse)(nil), "github.com.bblfsh.server.daemon.protocol.DriverPoolStatesResponse")
	proto.RegisterType((*DriverInstanceStatesRequest)(nil), "github.com.bblfsh.server.daemon.protocol.DriverInstanceStatesRequest")
	proto.RegisterType((*DriverPoolStatesRequest)(nil), "github.com.bblfsh.server.daemon.protocol.DriverPoolStatesRequest")
	proto.RegisterEnum("github.com.bblfsh.server.daemon.protocol.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProtocolService service

type ProtocolServiceClient interface {
	DriverInstanceStates(ctx context.Context, in *DriverInstanceStatesRequest, opts ...grpc.CallOption) (*DriverInstanceStatesResponse, error)
	DriverPoolStates(ctx context.Context, in *DriverPoolStatesRequest, opts ...grpc.CallOption) (*DriverPoolStatesResponse, error)
}

type protocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtocolServiceClient(cc *grpc.ClientConn) ProtocolServiceClient {
	return &protocolServiceClient{cc}
}

func (c *protocolServiceClient) DriverInstanceStates(ctx context.Context, in *DriverInstanceStatesRequest, opts ...grpc.CallOption) (*DriverInstanceStatesResponse, error) {
	out := new(DriverInstanceStatesResponse)
	err := grpc.Invoke(ctx, "/github.com.bblfsh.server.daemon.protocol.ProtocolService/DriverInstanceStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) DriverPoolStates(ctx context.Context, in *DriverPoolStatesRequest, opts ...grpc.CallOption) (*DriverPoolStatesResponse, error) {
	out := new(DriverPoolStatesResponse)
	err := grpc.Invoke(ctx, "/github.com.bblfsh.server.daemon.protocol.ProtocolService/DriverPoolStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProtocolService service

type ProtocolServiceServer interface {
	DriverInstanceStates(context.Context, *DriverInstanceStatesRequest) (*DriverInstanceStatesResponse, error)
	DriverPoolStates(context.Context, *DriverPoolStatesRequest) (*DriverPoolStatesResponse, error)
}

func RegisterProtocolServiceServer(s *grpc.Server, srv ProtocolServiceServer) {
	s.RegisterService(&_ProtocolService_serviceDesc, srv)
}

func _ProtocolService_DriverInstanceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverInstanceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DriverInstanceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.bblfsh.server.daemon.protocol.ProtocolService/DriverInstanceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DriverInstanceStates(ctx, req.(*DriverInstanceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_DriverPoolStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverPoolStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DriverPoolStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.bblfsh.server.daemon.protocol.ProtocolService/DriverPoolStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DriverPoolStates(ctx, req.(*DriverPoolStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.bblfsh.server.daemon.protocol.ProtocolService",
	HandlerType: (*ProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DriverInstanceStates",
			Handler:    _ProtocolService_DriverInstanceStates_Handler,
		},
		{
			MethodName: "DriverPoolStates",
			Handler:    _ProtocolService_DriverPoolStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/bblfsh/server/daemon/protocol/generated.proto",
}

func (m *DriverInstanceState) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverInstanceState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Status))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Processes) > 0 {
		dAtA3 := make([]byte, len(m.Processes)*10)
		var j2 int
		for _, num1 := range m.Processes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *DriverInstanceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverInstanceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Elapsed)))
	n4, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Elapsed, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.State) > 0 {
		for _, msg := range m.State {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DriverPoolState) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverPoolState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wanted != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Wanted))
	}
	if m.Running != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Running))
	}
	if m.Waiting != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Waiting))
	}
	if m.Success != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Success))
	}
	if m.Errors != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Errors))
	}
	if m.Exited != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Exited))
	}
	return i, nil
}

func (m *DriverPoolStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverPoolStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Elapsed)))
	n5, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Elapsed, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.State) > 0 {
		for k, _ := range m.State {
			dAtA[i] = 0x1a
			i++
			v := m.State[k]
			msgSize := 0
			if v != nil {
				msgSize = v.ProtoSize()
				msgSize += 1 + sovGenerated(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + msgSize
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGenerated(dAtA, i, uint64(v.ProtoSize()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *DriverInstanceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverInstanceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DriverPoolStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverPoolStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DriverInstanceState) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGenerated(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Processes) > 0 {
		l = 0
		for _, e := range m.Processes {
			l += sovGenerated(uint64(e))
		}
		n += 1 + sovGenerated(uint64(l)) + l
	}
	return n
}

func (m *DriverInstanceStatesResponse) ProtoSize() (n int) {
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Elapsed)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.ProtoSize()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *DriverPoolState) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Wanted != 0 {
		n += 1 + sovGenerated(uint64(m.Wanted))
	}
	if m.Running != 0 {
		n += 1 + sovGenerated(uint64(m.Running))
	}
	if m.Waiting != 0 {
		n += 1 + sovGenerated(uint64(m.Waiting))
	}
	if m.Success != 0 {
		n += 1 + sovGenerated(uint64(m.Success))
	}
	if m.Errors != 0 {
		n += 1 + sovGenerated(uint64(m.Errors))
	}
	if m.Exited != 0 {
		n += 1 + sovGenerated(uint64(m.Exited))
	}
	return n
}

func (m *DriverPoolStatesResponse) ProtoSize() (n int) {
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Elapsed)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.State) > 0 {
		for k, v := range m.State {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovGenerated(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DriverInstanceStatesRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func (m *DriverPoolStatesRequest) ProtoSize() (n int) {
	var l int
	_ = l
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DriverInstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverInstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverInstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Processes = append(m.Processes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Processes = append(m.Processes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Processes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverInstanceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverInstanceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverInstanceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Elapsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, &DriverInstanceState{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverPoolState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverPoolState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverPoolState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wanted", wireType)
			}
			m.Wanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wanted |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			m.Running = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Running |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			m.Waiting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Waiting |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			m.Errors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errors |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exited", wireType)
			}
			m.Exited = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exited |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverPoolStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverPoolStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverPoolStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Elapsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = make(map[string]*DriverPoolState)
			}
			var mapkey string
			var mapvalue *DriverPoolState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DriverPoolState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.State[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverInstanceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverInstanceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverInstanceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverPoolStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverPoolStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverPoolStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/bblfsh/server/daemon/protocol/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x6f, 0xd3, 0x48,
	0x18, 0xf5, 0xd8, 0x8d, 0xdd, 0x4e, 0x56, 0xdb, 0xc8, 0x5b, 0x75, 0x5d, 0xef, 0xae, 0xed, 0xad,
	0x84, 0x14, 0x21, 0xe1, 0xa0, 0x70, 0x29, 0x95, 0x8a, 0xd4, 0x34, 0x01, 0x7a, 0xa0, 0x8d, 0x9c,
	0xf6, 0xc2, 0xcd, 0x71, 0xa6, 0xae, 0x45, 0x62, 0x07, 0xcf, 0x38, 0xa5, 0xff, 0xa0, 0xea, 0x89,
	0x13, 0x2a, 0x87, 0x4a, 0x45, 0x14, 0x89, 0x9f, 0xc1, 0xb1, 0x47, 0x0e, 0xf4, 0x5a, 0x50, 0x7a,
	0xe0, 0xca, 0x99, 0x03, 0x42, 0xe3, 0x19, 0x2b, 0x21, 0xcd, 0xa1, 0x10, 0x71, 0xf3, 0x7c, 0xdf,
	0x7b, 0xe3, 0xf7, 0xde, 0x37, 0x1f, 0x5c, 0xf2, 0x03, 0xb2, 0x9b, 0x34, 0x6d, 0x2f, 0xea, 0x94,
	0x9a, 0xcd, 0xf6, 0x0e, 0xde, 0x2d, 0x61, 0x14, 0xf7, 0x50, 0x5c, 0x6a, 0xb9, 0xa8, 0x13, 0x85,
	0xa5, 0x6e, 0x1c, 0x91, 0xc8, 0x8b, 0xda, 0x25, 0x1f, 0x85, 0x28, 0x76, 0x09, 0x6a, 0xd9, 0x69,
	0x49, 0x2d, 0x0e, 0x98, 0x36, 0x63, 0xda, 0x8c, 0x69, 0x33, 0xa6, 0x9d, 0x31, 0xf5, 0x5b, 0x43,
	0xff, 0xf0, 0x23, 0x3f, 0x62, 0x77, 0x36, 0x93, 0x9d, 0xf4, 0x94, 0x1e, 0xd2, 0x2f, 0xc6, 0xd0,
	0x4d, 0x3f, 0x8a, 0xfc, 0x36, 0x1a, 0xa0, 0x48, 0xd0, 0x41, 0x98, 0xb8, 0x9d, 0x2e, 0x07, 0x18,
	0xa3, 0x80, 0x56, 0x12, 0xbb, 0x24, 0xc8, 0x7e, 0xb9, 0xf8, 0x0d, 0xc0, 0xbf, 0xaa, 0x71, 0xd0,
	0x43, 0xf1, 0x7a, 0x88, 0x89, 0x1b, 0x7a, 0xa8, 0x41, 0x5c, 0x82, 0xd4, 0x79, 0x28, 0x06, 0x2d,
	0x0d, 0x58, 0xa0, 0x38, 0x53, 0x91, 0xfb, 0x17, 0xa6, 0xb8, 0x5e, 0x75, 0xc4, 0xa0, 0xa5, 0xce,
	0xc1, 0x5c, 0xd0, 0x71, 0x7d, 0xa4, 0x89, 0xb4, 0xe5, 0xb0, 0x83, 0xfa, 0x10, 0xca, 0x98, 0xb8,
	0x24, 0xc1, 0x9a, 0x64, 0x81, 0xe2, 0x9f, 0xe5, 0xdb, 0xf6, 0x75, 0x0d, 0xdb, 0x8d, 0x94, 0xe7,
	0x70, 0xbe, 0x7a, 0x0f, 0x2a, 0x5e, 0x8c, 0x68, 0x74, 0xda, 0x94, 0x05, 0x8a, 0xf9, 0xb2, 0x6e,
	0x33, 0x07, 0x76, 0xe6, 0xc0, 0xde, 0xca, 0x2c, 0x56, 0xa6, 0xcf, 0x2e, 0x4c, 0xe1, 0xf9, 0x47,
	0x13, 0x38, 0x19, 0x49, 0xbd, 0x01, 0x67, 0xba, 0x71, 0xe4, 0x21, 0x8c, 0x11, 0xd6, 0x72, 0x96,
	0x54, 0x94, 0x2a, 0xca, 0xd7, 0x0b, 0x53, 0x0a, 0x42, 0xe2, 0x0c, 0x3a, 0xcb, 0xd3, 0x07, 0x27,
	0xa6, 0xf0, 0xe5, 0x95, 0x29, 0x2c, 0x7e, 0x00, 0xf0, 0xdf, 0x31, 0x01, 0x60, 0x07, 0xe1, 0x6e,
	0x14, 0x62, 0x9a, 0x84, 0x8c, 0xe2, 0x38, 0x8a, 0xb1, 0x06, 0x2c, 0xa9, 0x38, 0xe3, 0xf0, 0x93,
	0xba, 0x02, 0x15, 0xd4, 0x76, 0xbb, 0x18, 0xb5, 0xd2, 0x2c, 0xf2, 0xe5, 0x85, 0x2b, 0x4a, 0xab,
	0x3c, 0x6b, 0x26, 0xf4, 0x28, 0x15, 0xca, 0x39, 0x6a, 0x03, 0xe6, 0xa8, 0x65, 0xa4, 0x49, 0x96,
	0x54, 0xcc, 0x97, 0x57, 0xae, 0x9f, 0xd8, 0x18, 0xb5, 0x0e, 0xbb, 0x6b, 0xc8, 0xd6, 0x67, 0x00,
	0x67, 0x19, 0xb0, 0x1e, 0x45, 0x6d, 0x36, 0x53, 0x13, 0xca, 0x7b, 0x6e, 0x48, 0xa3, 0xa5, 0x73,
	0x1d, 0x0a, 0x86, 0x97, 0xd5, 0xff, 0xa1, 0x12, 0x27, 0x61, 0x18, 0x84, 0x7e, 0x6a, 0x69, 0x08,
	0x91, 0xd5, 0x29, 0x64, 0xcf, 0x0d, 0x08, 0x85, 0x48, 0x23, 0x10, 0x5e, 0xa7, 0x10, 0x9c, 0x78,
	0x34, 0xe8, 0x74, 0x84, 0xc3, 0x10, 0x5e, 0xa7, 0x4a, 0x78, 0xa6, 0xb9, 0x11, 0x25, 0x3c, 0x5c,
	0x0a, 0x78, 0x16, 0x50, 0xa9, 0xf2, 0x28, 0x20, 0x2d, 0x0f, 0x39, 0x3d, 0x17, 0xa1, 0x36, 0xe2,
	0xf4, 0xb7, 0x0f, 0xcf, 0xfb, 0x71, 0x78, 0x8f, 0x7e, 0x76, 0x78, 0x57, 0x95, 0xa6, 0x7b, 0x80,
	0x6a, 0x21, 0x89, 0xf7, 0xf9, 0x30, 0x75, 0x0c, 0xe1, 0xa0, 0xa8, 0x16, 0xa0, 0xf4, 0x04, 0xed,
	0xb3, 0x8d, 0x74, 0xe8, 0xa7, 0xba, 0x09, 0x73, 0x3d, 0xb7, 0x9d, 0x20, 0xee, 0xe0, 0xee, 0x2f,
	0x8b, 0x70, 0xd8, 0x3d, 0xcb, 0xe2, 0x12, 0x18, 0xca, 0xf5, 0x3f, 0xf8, 0xcf, 0xf8, 0xbd, 0x78,
	0x9a, 0x20, 0x4c, 0x16, 0x17, 0xe0, 0xdf, 0x57, 0xbd, 0xa4, 0xad, 0x9b, 0x2f, 0x00, 0x94, 0xd9,
	0x5a, 0xab, 0x1a, 0x54, 0xd6, 0x9c, 0xda, 0xea, 0x56, 0xad, 0x5a, 0x10, 0xf4, 0xfc, 0xe1, 0xb1,
	0xa5, 0xac, 0xf1, 0x45, 0xd5, 0xa0, 0xe2, 0x6c, 0x6f, 0x6c, 0xac, 0x6f, 0x3c, 0x28, 0x00, 0xd6,
	0x71, 0xf8, 0x13, 0xd3, 0xa0, 0x52, 0x5f, 0xdd, 0x6e, 0xd0, 0x8e, 0xc8, 0x3a, 0x75, 0x37, 0xc1,
	0xb4, 0x33, 0x0f, 0x65, 0xda, 0xa9, 0x55, 0x0b, 0x92, 0x0e, 0x0f, 0x8f, 0x2d, 0x99, 0x36, 0xd8,
	0x5d, 0x8d, 0xad, 0xcd, 0x7a, 0xbd, 0x56, 0x2d, 0x4c, 0x31, 0x46, 0x83, 0x44, 0xdd, 0x2e, 0x6a,
	0xe9, 0x7f, 0x1c, 0xbc, 0x36, 0x84, 0xb7, 0xa7, 0x86, 0xf0, 0xee, 0xd4, 0x10, 0xca, 0xe7, 0x22,
	0x9c, 0xad, 0xf3, 0x10, 0x1a, 0x28, 0xee, 0x05, 0x1e, 0x52, 0xdf, 0x00, 0x38, 0x37, 0xce, 0xa7,
	0x5a, 0x9b, 0x68, 0x23, 0xb3, 0x30, 0xf4, 0xfb, 0x93, 0x5e, 0xc3, 0x5f, 0xf2, 0x4b, 0x00, 0x0b,
	0xa3, 0x81, 0xab, 0xab, 0x93, 0x3c, 0x3c, 0xa6, 0xaf, 0x32, 0xf9, 0xdb, 0xad, 0x18, 0x67, 0x7d,
	0x03, 0xbc, 0xef, 0x1b, 0xe0, 0x53, 0xdf, 0x10, 0x8e, 0x2e, 0x0d, 0xe1, 0xe4, 0xd2, 0x00, 0x8f,
	0xa7, 0x33, 0x62, 0x53, 0x4e, 0xbf, 0xee, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x0e, 0xf2,
	0xe0, 0x41, 0x07, 0x00, 0x00,
}
